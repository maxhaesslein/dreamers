#!/usr/bin/python


# The Dreamers v4, 2023
# by maxhaesslein, 2014-2023
# www.maxhaesslein.de


# dependencies: opencv
# sudo apt install python3-opencv
# sudo apt install xserver-xorg xinit
#
# start with:
# startx /home/mh/dreamers/dreamers

# autostart happens in ~/.config/systemd/user/dreamers.service


print('The Dreamers v.4')


import numpy as np
import cv2
import time
import os
import random


options = {

    'screenWidth': 720,
    'screenHeight': 720,

    'fps': 30,

    'blankLoadingScreen': False,

    'windowName': 'The Dreamers',

    'debugFPS': True,
    'debugTiming': True,

    'videoExtension': 'mp4',
    'videoPath': 'footage/',

    'verbose': True,

}


if options['verbose']:
    print('-- options --')
    print(options)



# setup window
cv2.namedWindow( options['windowName'], cv2.WINDOW_NORMAL )
cv2.resizeWindow( options['windowName'], options['screenWidth'], options['screenHeight'] )
cv2.setWindowProperty( options['windowName'], cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN )



# display startup image
startup_image = np.zeros((options['screenWidth'], options['screenHeight'], 3), np.uint8)
if not options['blankLoadingScreen']:

    font = cv2.FONT_HERSHEY_TRIPLEX # TODO: use custom font
    text = "The Dreamers"
    fontsize = 2
    fontwidth = 3
    textsize = cv2.getTextSize(text, font, fontsize, fontwidth)[0]
    textX = int((options['screenWidth'] - textsize[0]) / 2)
    textY = int((options['screenHeight'] - textsize[1]) / 2)
    cv2.putText(startup_image, text, (textX, textY), font, fontsize, (185,107,250), fontwidth)

    text = "loading ...".upper()
    fontsize = 1
    fontwidth = 1
    textsize = cv2.getTextSize(text, font, fontsize, fontwidth)[0]
    textX = int((options['screenWidth'] - textsize[0]) / 2)
    textY = int((options['screenHeight'] - textsize[1]))
    cv2.putText(startup_image, text, (textX, textY), font, fontsize, (255,255,255), fontwidth)

cv2.imshow(options['windowName'], startup_image)
cv2.waitKey(60)



# find videos:
videoFiles = [f for f in os.listdir(options['videoPath']) if os.path.isfile(os.path.join(options['videoPath'], f)) and f.lower().endswith(options['videoExtension'])]
if options['verbose']:
    print('-- video files --')
    print(videoFiles)


def getNewVideoIn():

    videoFile = random.choice(videoFiles)
    videoIn = cv2.VideoCapture(options['videoPath']+videoFile)

    maxFrameCount = videoIn.get(cv2.CAP_PROP_FRAME_COUNT)
    if maxFrameCount > 100:
        startFrame = random.randint(0, maxFrameCount-100)
        videoIn.set( cv2.CAP_PROP_POS_FRAMES, startFrame )

    return videoIn


videoIn = getNewVideoIn()


debugFont = cv2.FONT_HERSHEY_COMPLEX_SMALL

fps = 0
target_time = current_time = time.time()
previous_time = time.time()+1
loop_delta = 1./options['fps']
sleep_time = 0


# main loop
while True:

    start_time = time.time()

    ret, frame = videoIn.read()

    if ret == False:
        # loop video:
        videoIn.set(cv2.CAP_PROP_POS_FRAMES, 0)
        continue


    # resize frame
    frameHeight, frameWidth, frameChannels = frame.shape
    targetWidth = options['screenWidth']
    targetHeight = int(targetWidth * frameHeight/frameWidth)
    if targetHeight < options['screenHeight']:
        targetHeight = options['screenHeight']
        targetWidth = int(targetHeight * frameWidth/frameHeight)

    marginX = int((targetWidth - options['screenWidth'])/2)
    marginY = int((targetHeight - options['screenHeight'])/2)

    im = cv2.resize( frame, (targetWidth, targetHeight) )

    im = im[marginY:marginY+options['screenHeight'], marginX:marginX+options['screenWidth']]

    if options['debugFPS']:
        color = (0,255,0)
        if fps >= 29 or fps <= 31:
            fps = 30

        if fps < 25:
            color = (255,0,0)
        elif fps < 30:
            color = (255,255,0)

        cv2.putText( im, str(fps), (10,20), debugFont, 1, color, 1, cv2.LINE_AA )

    if options['debugTiming']:

        width = 30
        height = 100

        lineWidth = 1

        x = options['screenWidth'] - width - 10
        y = options['screenHeight'] - height - 10

        maxTime = int(loop_delta*1000)
        usedTime = maxTime-sleep_time

        filledHeight = int(float(height)/float(maxTime)*float(usedTime))

        if filledHeight > height:
            filledHeight = height

        color = (0,255,0)
        if usedTime > maxTime * 0.8:
            color = (0,0,255)
        elif usedTime > maxTime*0.6:
            color = (0,255,255)

        cv2.rectangle( im, (x,y), (x+width, y+height), color, lineWidth )
        cv2.rectangle( im, (x,y-3+height-filledHeight), (x+width, y+height), color, -1 )


    cv2.imshow(options['windowName'], im)


    previous_time, current_time = current_time, time.time()
    fps = int(1./(current_time-previous_time))
    target_time += loop_delta
    sleep_time = int((target_time - current_time)*1000)
    if sleep_time < 1:
        sleep_time = 1

    key = cv2.waitKey(sleep_time)

    if key == 27: # escape
        break

    elif key == 32: # space
        videoIn = getNewVideoIn()


print('bye!')

videoIn.release()
cv2.destroyAllWindows()

